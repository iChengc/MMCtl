apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 27
    buildToolsVersion "28.0.3"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDir 'build/generated/source/mmctrl'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task mkGenDirs {
    doFirst {
        file('build/generated/source/mmctrl/com/cc/core/actions/').mkdirs()
        file('build/generated/source/mmctrl/com/cc/core/wechat/').mkdirs()
    }
}

task genActions(dependsOn: [mkGenDirs, sourceSets]) {

    doLast {

        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriter('UTF-8') { writer ->
                    writer.write("package com.cc.core.actions;\n\npublic class ActionNames {\n" +
                            "\tpublic static final String[] ACTION_NAMES = new String[]{\n")
                }
        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriterAppend('UTF-8') { writer ->
                    fileTree('src/main/java/com/cc/core/actions/shell/impl').include("*.java").each {
                        writer.write("\t\t\"com.cc.core.actions.shell.impl." + it.name.substring(0,
                                it.name.lastIndexOf('.java')) + "\",\n")
                    }
                }
        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriterAppend('UTF-8') { writer ->
                    fileTree('src/main/java/com/cc/core/accessibility/impl').include("*.kt").each {
                        writer.write("\t\t\"com.cc.core.accessibility.impl." + it.name.substring(0,
                                it.name.lastIndexOf('.kt')) + "\",\n")
                    }
                }
        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriterAppend('UTF-8') { writer ->
                    fileTree('src/main/java/com/cc/core/command/impl').include("*.kt").each {
                        writer.write("\t\t\"com.cc.core.command.impl." + it.name.substring(0,
                                it.name.lastIndexOf('.kt')) + "\",\n")
                    }
                }
        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriterAppend('UTF-8') { writer ->
                    fileTree('src/main/java/com/cc/core/wechat/invoke').include("*.kt").each {
                        writer.write("\t\t\"com.cc.core.wechat.invoke." + it.name.substring(0,
                                it.name.lastIndexOf('.kt')) + "\",\n")
                    }
                }
        file('build/generated/source/mmctrl/com/cc/core/actions/ActionNames.java').
                withWriterAppend('UTF-8') { writer ->
                    writer.write("\t};\n}")
                }
    }
}

task genWechatHooks(dependsOn: mkGenDirs) {

    doLast {
        file('build/generated/source/mmctrl/com/cc/core/wechat/WechatHooks.java').withWriter('UTF-8') { writer ->
            writer.write("package com.cc.core.wechat;\n\npublic class WechatHooks {\n" +
                    "\tpublic static String[] HOOKS = new String[] {\n")
        }
        file('build/generated/source/mmctrl/com/cc/core/wechat/WechatHooks.java').withWriterAppend('UTF-8') { writer ->
            fileTree('src/main/java/com/cc/core/wechat/hook').include("*.java").each {
                writer.write(
                        "\t\t\"com.cc.core.wechat.hook." + it.name.substring(0, it.name.lastIndexOf('.java')) +
                                "\",\n")
            }
        }
        file('build/generated/source/mmctrl/com/cc/core/wechat/WechatHooks.java').withWriterAppend('UTF-8') { writer ->
            writer.write("\t};\n}")
        }
    }
}

preBuild.dependsOn genActions
preBuild.dependsOn genWechatHooks

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.android.support:recyclerview-v7:27.1.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'org.greenrobot:greendao:3.2.2'
    compile 'com.google.code.gson:gson:2.8.5'
    provided 'de.robv.android.xposed:api:82'
    provided 'de.robv.android.xposed:api:82:sources'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    compile 'com.squareup.okhttp3:okhttp:3.12.1'
}
repositories {
    mavenCentral()
}
